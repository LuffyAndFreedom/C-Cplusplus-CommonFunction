八皇后问题：
在8*8格的国际象棋上摆八个皇后，使其不能相互攻击，即任意两个皇后都不能处于同一行、同一列或者同一
	斜线上（斜率为1），问有多少中摆法。

回溯法：
	所谓回溯法，名字高大上，思想很朴素。
	设想把你放在一个迷宫里，想要走出迷宫，最直接的办法是什么呢？
	没错，试。先选一条路走起，走不通就往回退尝试别的路，走不通继续往回退，直到找到出口或所有路都试过走不出去为止。
	尽管回溯法也算是暴力方法，但也不是特别暴力。
	
算法思路：
  考虑八皇后问题，解决这个问题最暴力的办法是这样的：
	从8*8=64个格子里选8个格子，放皇后，测试是否满足条件，若满足则计数加1，否则换8个格子继续试。
　　很显然， 64中选8，并不是个小数字，十亿级别的尝试次数，够暴力。
　　这还是8*8的格子，要是换围棋棋盘……这画面太美我都不敢算。
　　
	稍加分析，我们可以得到一个不那么暴力的办法，显然，每行每列最多只能有一个皇后，如果基于这个事实进行暴力破解，那结果会好得多。
	安排皇后时，第一行有8种选法，一旦第一行选定，假设选为（1，i），第二行只能选（2，j），其中j!=i，所以有7种选法。
	以此类推，需要穷举的情况有8！=40320种。
	

	每一行可以放入一个皇后，每一行都有八种放法，然后第二行也有八种，第三行...
	于是我们用一个八叉树来描述这个过程。从根节点开始，树没增加一层，遍是多放一个皇后，直到第8层（根节点为0层），最后得到一各完全的八叉树。
	八叉树：
	0层																							/
	1层					   |				 |					 |					   |				   |				   |				   |				 |
	2层				| | | | | | | | 	| | | | | | | |		| | | | | | | |		| | | | | | | |		| | | | | | | |		| | | | | | | |		| | | | | | | |		| | | | | | | |	
	依次类推至第八层。


于是我们定义一个二维数组Pos[8][8]，Pos[x][y]表示皇后放在第x行的第y列这个位置。
下面是四人皇后的坐标：
(0,0),(0,1),(0,2),(0,3)
(1,0),(1,1),(1,2),(1,2)
(2,0),(2,1),(2,2),(2,3)
(3,0),(3,1),(3,2),(3,3)
设两个皇后的位置分别为：Pos[i][j]， Pos[m][n]；
那我们考虑第一个条件：不能在同一行，同一列。
于是我们得到，八个皇后的位置，i != m, j != n；
不能位于对角线上：
	于是我们得到：|i-m| != |j-n| 或者 |i-j| != |m-n|

安排皇后时，我们一行一行来安排皇后，每行只可以安排一个皇后，这就保证了所有皇后不在同一行。
后面我们就只需要考虑，保证所有皇后不在同一列及对角线上。
int queenNum=8;		//安排皇后的个数
int totalNum=0;		//有多少种安排方法
int pos[8]={0};		//pos是一个整形数组，数组的下标是每一行，每个数组的值是指皇后安排在当前这一行的这一列
比如（其中一种结果）：
pos[0] = 0.	//第0行的第0列
pos[1] = 4.	//第1行的第4列
pos[2] = 7.	//第2行的第7列
pos[3] = 5.	//第3行的第5列
pos[4] = 2.	//第4行的第2列
pos[5] = 6.	//第5行的第6列
pos[6] = 1.	//第6行的第1列
pos[7] = 3.	//第7行的第3列
void prinf_value()
{
    for(int i = 0; i < 8; i++)
        printf("pos[%d] = %d.\n", i, pos[i]);
}
//打印出这一次符合条件的皇后的位置


bool is_ok(int curRow) {
    for(int j=0;j!=curRow;j++) {
        if(pos[curRow] == pos[j] || curRow - pos[curRow] == j - pos[j] || curRow + pos[curRow] == j + pos[j])
            return false;
    }
    return true;
}
//判断皇后当前行所放的位置是否符合条件
//	for(int j=0;j!=curRow;j++)，循环遍历前面已经安排的的行，判断当前行所放的位置是否与前面安排好的行冲突
//	pos[curRow] == pos[j]		判断当前行所放的位置（列），是否和前面所放好的每一行位置是否在同一列（不能在同一列） 
//	curRow - pos[curRow] == j - pos[j]		当前的行数 - 当前行所在列的值 == 前面放好的行数 - 前面放好行数所在列的值（不再对角线上，相等则在对角线上）
//	curRow + pos[curRow] == j + pos[j]		当前的行数 + 当前行所在列的值 == 前面放好的行数 + 前面放好行数所在列的值（不再对角线上，相等则在对角线上）
//	curRow - pos[curRow] == j - pos[j] 和 curRow + pos[curRow] == j + pos[j]，其实就是|i-m| == |j-n| 或者 |i-j| == |m-n|，这就是在对角线上
//	curRow - pos[curRow] == j - pos[j] 和 curRow + pos[curRow] == j + pos[j]，其实就是|i-m| == |j-n| 或者 |i-j| == |m-n|，这就是在对角线上

void queen(int curRow) {
    if(curRow==queenNum) {
        totalNum++;
        prinf_value();
    } else
        for(int col=0;col!=queenNum;col++){
            pos[curRow]=col;
            if(is_ok(curRow))
                queen(curRow+1);
        }       
}
//	for(int col=0;col!=queenNum;col++) 遍历当前行的每一列，判断每一列放在当前行的位置是否合适
//	pos[curRow]=col;		把这一列放在当前行的位置

int main(){
    queen(0);
    cout<<totalNum;
    return 1;

}


